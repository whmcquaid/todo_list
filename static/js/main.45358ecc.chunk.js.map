{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["App","useState","value","setValue","todos","setTodos","addTodo","text","newTodo","complete","className","onSubmit","e","preventDefault","htmlFor","id","type","onChange","target","required","map","todo","index","style","textDecoration","newTodos","completeTodo","onClick","splice","removeTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAkEeA,MAxDf,WAA6B,IAAD,EACAC,mBAAiB,IADjB,mBACnBC,EADmB,KACZC,EADY,OAEAF,mBAAkB,IAFlB,mBAEnBG,EAFmB,KAEZC,EAFY,KAUpBC,EAAU,SAACC,GACf,IAAMC,EAAgB,sBAAOJ,GAAP,CAAc,CAACG,OAAME,UAAU,KACrDJ,EAASG,IAeX,OACE,qBAAKE,UAAU,gBAAf,SACA,eAAC,WAAD,WACE,oBAAIA,UAAU,QAAd,wCACA,uBAAMA,UAAU,YAAYC,SA3BX,SAACC,GACpBA,EAAEC,iBACFP,EAAQJ,GACRC,EAAS,KAwBP,UACE,uBAAOO,UAAU,aAAaI,QAAQ,aAAtC,mBACA,uBAAOC,GAAG,aAAaC,KAAK,OAAOd,MAAOA,EAAOe,SAAU,SAAAL,GAAC,OAAIT,EAASS,EAAEM,OAAOhB,QAAQiB,UAAQ,IAClG,wBAAQT,UAAU,iBAAiBM,KAAK,SAAxC,yBAEF,kCACGZ,EAAMgB,KAAI,SAACC,EAAYC,GACtB,OACA,sBAAKZ,UAAU,eAA2Ba,MAAO,CAACC,eAAgBH,EAAKZ,SAAW,eAAiB,QAAnG,UACGY,EAAKd,KACL,KACD,uBAAOG,UAAU,oBAAoBM,KAAK,WAAWC,SAAU,kBA3BpD,SAACK,GACpB,IAAMG,EAAgB,YAAOrB,GAC7BqB,EAASH,GAAOb,UAAYgB,EAASH,GAAOb,SAC5CJ,EAASoB,GAwBoEC,CAAaJ,MAClF,wBAAQN,KAAK,SAASW,QAAS,kBAtBtB,SAACL,GAClB,IAAMG,EAAgB,YAAOrB,GAC7BqB,EAASG,OAAON,EAAO,GACvBjB,EAASoB,GAmBoCI,CAAWP,IAAhD,oBAJiCA,cCrC9BQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.45358ecc.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react'\nimport './App.css';\n\ntype FormElem = React.FormEvent<HTMLFormElement>\n\ninterface ITodo {\n  text: string\n  complete: boolean\n}\n\nfunction App(): JSX.Element {\n  const [value, setValue] = useState<string>('')\n  const [todos, setTodos] = useState<ITodo[]>([])\n\n  const handleSubmit = (e:FormElem):void => {\n    e.preventDefault()\n    addTodo(value)\n    setValue('')\n  }\n\n  const addTodo = (text: string):void => {\n    const newTodo: ITodo[] = [...todos, {text, complete: false}]\n    setTodos(newTodo)  \n  }\n\n  const completeTodo = (index:number):void => {\n    const newTodos:ITodo[] = [...todos]\n    newTodos[index].complete = !newTodos[index].complete\n    setTodos(newTodos)\n  }\n\n  const removeTodo = (index:number):void => {\n    const newTodos:ITodo[] = [...todos]\n    newTodos.splice(index, 1)\n    setTodos(newTodos);\n  }\n\n  return (\n    <div className='app-container'>\n    <Fragment>\n      <h1 className='title'>Typescript React Todo List</h1>\n      <form className='todo-form' onSubmit={handleSubmit}>\n        <label className='todo-label' htmlFor='todo-input'>Todo:</label>\n        <input id='todo-input' type='text' value={value} onChange={e => setValue(e.target.value)} required></input>\n        <button className='addTodo-button' type='submit'>Add Todo</button>\n      </form>\n      <section>\n        {todos.map((todo:ITodo, index:number) => {\n          return (\n          <div className='todo-display' key={index} style={{textDecoration: todo.complete ? 'line-through' : 'none'}}>\n            {todo.text}\n            {'  '}\n            <input className='todo-complete-box' type='checkbox' onChange={() => completeTodo(index)}></input>\n            <button type='button' onClick={() => removeTodo(index)}>\n             &times;\n            </button>\n          </div>\n          )\n        })\n        }\n      </section>\n    </Fragment>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}