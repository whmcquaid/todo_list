{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["App","useState","value","setValue","todos","setTodos","addTodo","text","newTodo","complete","id","uuidv4","className","onSubmit","e","preventDefault","htmlFor","type","onChange","target","required","map","todo","style","textDecoration","newTodos","index","i","length","completeTodo","onClick","splice","removeTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQA6FeA,MAjFf,WAA6B,IAAD,EACAC,mBAAiB,IADjB,mBACnBC,EADmB,KACZC,EADY,OAEAF,mBAAkB,IAFlB,mBAEnBG,EAFmB,KAEZC,EAFY,KAmBpBC,EAAU,SAACC,GACf,IAAMC,EAAgB,sBAAOJ,GAAP,CAAc,CAACG,OAAME,UAAU,EAAOC,GAAIC,iBAChEN,EAASG,IA+BX,OACE,qBAAKI,UAAU,gBAAf,SACA,eAAC,WAAD,WACE,oBAAIA,UAAU,QAAd,wCACA,uBAAMA,UAAU,YAAYC,SA3CX,SAACC,GACpBA,EAAEC,iBACFT,EAAQJ,GACRC,EAAS,KAwCP,UACE,uBAAOS,UAAU,aAAaI,QAAQ,aAAtC,mBACA,uBAAON,GAAG,aAAaO,KAAK,OAAOf,MAAOA,EAAOgB,SAAU,SAAAJ,GAAC,OAAIX,EAASW,EAAEK,OAAOjB,QAAQkB,UAAQ,IAClG,wBAAQR,UAAU,iBAAiBK,KAAK,SAAxC,yBAEF,kCACGb,EAAMiB,KAAI,SAACC,EAAYZ,GACtB,OACA,sBAAKE,UAAU,eAA6BW,MAAO,CAACC,eAAgBF,EAAKb,SAAW,eAAiB,QAArG,UACGa,EAAKf,KACL,KACD,uBAAOK,UAAU,oBAAoBK,KAAK,WAAWC,SAAU,kBA3CpD,SAACR,GACpB,IAAMe,EAAgB,YAAOrB,GACzBsB,EAAQ,SAAChB,GACX,IAAI,IAAIiB,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IAClC,GAAIF,EAASE,GAAGjB,KAAOA,EACrB,OAAOiB,EAGX,OAAQ,GAEVF,EAASC,EAAMhB,IAAKD,UAAYgB,EAASC,EAAMhB,IAAKD,SACpDJ,EAASoB,GAgCoEI,CAAaP,EAAKZ,OACvF,wBAAQO,KAAK,SAASa,QAAS,kBA9BtB,SAACpB,GAClB,IAAMe,EAAgB,YAAOrB,GAS7BqB,EAASM,OARG,SAACrB,GACX,IAAI,IAAIiB,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IAClC,GAAIF,EAASE,GAAGjB,KAAOA,EACrB,OAAOiB,EAGX,OAAQ,EAEMD,CAAMhB,GAAK,GAC3BL,EAASoB,GAmBoCO,CAAWV,EAAKZ,KAArD,oBAJiCY,EAAKZ,eChEnCuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f40d3c31.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react'\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\ntype FormElem = React.FormEvent<HTMLFormElement>\n\ninterface ITodo {\n  text: string\n  complete: boolean\n  id: string\n}\n\nfunction App(): JSX.Element {\n  const [value, setValue] = useState<string>('')\n  const [todos, setTodos] = useState<ITodo[]>([])\n  \n  const getIndex = (id:string):number => {\n    for(let i = 0; i < todos.length; i++){\n      if (todos[i].id === id){\n        return i;\n      }\n    }\n    return -1\n  }\n\n  const handleSubmit = (e:FormElem):void => {\n    e.preventDefault()\n    addTodo(value)\n    setValue('')\n  }\n\n  const addTodo = (text: string):void => {\n    const newTodo: ITodo[] = [...todos, {text, complete: false, id: uuidv4()}]\n    setTodos(newTodo)  \n  }\n\n  const completeTodo = (id:string):void => {\n    const newTodos:ITodo[] = [...todos]\n    let index = (id:string):number => {\n      for(let i = 0; i < newTodos.length; i++){\n        if (newTodos[i].id === id){\n          return i;\n        }\n      }\n      return -1\n    }\n    newTodos[index(id)].complete = !newTodos[index(id)].complete\n    setTodos(newTodos)\n  }\n\n  const removeTodo = (id:string):void => {\n    const newTodos:ITodo[] = [...todos]\n    let index = (id:string):number => {\n      for(let i = 0; i < newTodos.length; i++){\n        if (newTodos[i].id === id){\n          return i;\n        }\n      }\n      return -1\n    }\n    newTodos.splice(index(id), 1)\n    setTodos(newTodos);\n  }\n\n  return (\n    <div className='app-container'>\n    <Fragment>\n      <h1 className='title'>Typescript React Todo List</h1>\n      <form className='todo-form' onSubmit={handleSubmit}>\n        <label className='todo-label' htmlFor='todo-input'>Todo:</label>\n        <input id='todo-input' type='text' value={value} onChange={e => setValue(e.target.value)} required></input>\n        <button className='addTodo-button' type='submit'>Add Todo</button>\n      </form>\n      <section>\n        {todos.map((todo:ITodo, id:number) => {\n          return (\n          <div className='todo-display' key={todo.id} style={{textDecoration: todo.complete ? 'line-through' : 'none'}}>\n            {todo.text}\n            {'  '}\n            <input className='todo-complete-box' type='checkbox' onChange={() => completeTodo(todo.id)}></input>\n            <button type='button' onClick={() => removeTodo(todo.id)}>\n             &times;\n            </button>\n          </div>\n          )\n        })\n        }\n      </section>\n    </Fragment>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}